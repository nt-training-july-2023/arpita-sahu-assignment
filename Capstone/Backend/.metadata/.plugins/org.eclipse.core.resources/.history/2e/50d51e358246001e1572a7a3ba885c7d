package com.nucleusteq.asessmentPlatform.controllers;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.nucleusteq.asessmentPlatform.dto.CategoryDto;
import com.nucleusteq.asessmentPlatform.service.CategoryService;

@RestController
@RequestMapping("/category")
public class CategoryController {
    @Autowired
    private CategoryService categoryService;

    @RequestMapping(value = "/save", method = RequestMethod.POST)
    public ResponseEntity<CategoryDto> saveCategory(
            @RequestBody CategoryDto category) {
        return new ResponseEntity<CategoryDto>(
                categoryService.addCategory(category), HttpStatus.CREATED);
    }

    @RequestMapping(value = "/categories", method = RequestMethod.GET)
    public List<CategoryDto> getCategories() {
        return categoryService.getAllCategories();
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<?> getCategoryById(@PathVariable int id){
        Optional<CategoryDto> category = categoryService.getCategoryById(id);
        if(category.isPresent())
            return ResponseEntity.ok(category);
        else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Category not found with id " + id);
        }
    }
//    public CategoryDto getCategoryById(@PathVariable int id) {
//        return categoryService.getCategoryById(id);
//    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    public CategoryDto updateCategory(@RequestBody CategoryDto category,
            @PathVariable int id) {
        return categoryService.updateCategory(category, id);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String deleteCategory(@PathVariable int id) {
        return categoryService.deleteCategory(id);
    }

}
