package com.nucleusteq.asessmentPlatform.services.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nucleusteq.asessmentPlatform.dto.CategoryDto;
import com.nucleusteq.asessmentPlatform.dto.UserDto;
import com.nucleusteq.asessmentPlatform.entities.Category;
import com.nucleusteq.asessmentPlatform.entities.User;
import com.nucleusteq.asessmentPlatform.exception.CategoryNotFoundException;
import com.nucleusteq.asessmentPlatform.repositories.CategoryRepo;
import com.nucleusteq.asessmentPlatform.service.CategoryService;

@Service
public class CategoryServiceImpl implements CategoryService {

    @Autowired
    private CategoryRepo categoryRepo;
    
    @Autowired
    private ModelMapper modelMapper;

    @Override
    public CategoryDto addCategory(CategoryDto categoryDto) {
        Category category = this.dtoToCategory(categoryDto);
        Category newCategory = new Category();
        newCategory.setTitle(category.getTitle());
        newCategory.setDescription(category.getDescription());
        categoryRepo.save(newCategory);
        CategoryDto newCategoryDto = this.categoryToDto(newCategory);
        newCategoryDto.setTitle(category.getTitle());
        newCategoryDto.setDescription(category.getDescription());
        return newCategoryDto;
    }

    @Override
    public List<CategoryDto> getAllCategories() {
        List<Category> category = this.categoryRepo.findAll();
        List<CategoryDto> categoryDtos = category.stream().map(category -> this.categoryToDto(user)).collect(Collectors.toList());
        return categoryDtos;
    }

    @Override
    public Category getCategoryById(int id) {
        return categoryRepo.findById(id)
                .orElseThrow(() -> new CategoryNotFoundException("Category not found with id " + id));
    }

    @Override
    public Category updateCategory(Category category, int id) {
        Category updatedCategory = categoryRepo.findById(id)
                .orElseThrow(() -> new CategoryNotFoundException("category not found"));
        updatedCategory.setTitle(category.getTitle());
        updatedCategory.setDescription(category.getDescription());
        return categoryRepo.save(updatedCategory);
    }

    @Override
    public String deleteCategory(int id) {
        Category category = categoryRepo.findById(id)
                .orElseThrow(() -> new CategoryNotFoundException("category not found with id " + id));
        categoryRepo.delete(category);
        return id + " deleted sucessfully";
    }
    public CategoryDto categoryToDto(Category category) {
        CategoryDto categoryDto = modelMapper.map(category, CategoryDto.class);
        return categoryDto;
    }

    public Category dtoToCategory(CategoryDto categoryDto) {
        Category category = this.modelMapper.map(categoryDto, Category.class);
        return category;
    }
}
